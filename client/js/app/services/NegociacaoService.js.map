{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["NegociacaoService","_http","Promise","resolve","reject","get","then","console","log","negociacoes","map","Date","objeto","data","quantidade","valor","catch","error","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","periodos","reduce","dados","periodo","concat","dado","Error","erro","negociacao","ConnectionFactory","getConnection","NegociacaoDao","conexao","dao","adiciona","listaTodos","connection","apagaTodos","listaAtual","obterNegociacoes","filter","some","JSON","stringify","negocicao","negociacaoExistente"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["import { Negociacao } from '../models/Negociacao';\r\nimport { HttpService } from 'HttpService';\r\n\r\nexport class NegociacaoService {\r\n\r\n    constructor(){\r\n       this._http = new HttpService();\r\n    }\r\n\r\n    obterNegociacoesDaSemana() {\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            this._http\r\n                .get('negociacoes/semana')\r\n                .then(negociacoes => {\r\n                    console.log(negociacoes);\r\n                    resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\r\n\r\n                })\r\n                .catch(error => {\r\n                    console.log(error)\r\n                    reject('Não foi possível obter as negociações da semana.');\r\n                })\r\n        })\r\n    }\r\n    obterNegociacoesDaSemanaAnterior() {\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            this._http\r\n                .get('negociacoes/anterior')\r\n                .then(negociacoes => {\r\n                    console.log(negociacoes);\r\n                    resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\r\n\r\n                })\r\n                .catch(error => {\r\n                    console.log(error)\r\n                    reject('Não foi possível obter as negociações da semana anterior');\r\n                })\r\n        })\r\n    }\r\n    obterNegociacoesDaSemanaRetrasada() {\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            this._http\r\n                .get('negociacoes/retrasada')\r\n                .then(negociacoes => {\r\n                    console.log(negociacoes);\r\n                    resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\r\n\r\n                })\r\n                .catch(error => {\r\n                    console.log(error)\r\n                    reject('Não foi possível obter as negociações da semana retrasada');\r\n                })\r\n        })\r\n    }\r\n\r\n    obterNegociacoes(){\r\n        return Promise.all([\r\n            this.obterNegociacoesDaSemana(),\r\n            this.obterNegociacoesDaSemanaAnterior(),\r\n            this.obterNegociacoesDaSemanaRetrasada()\r\n        ]).then(periodos => {\r\n\r\n            let negociacoes = periodos\r\n                .reduce((dados, periodo) => dados.concat(periodo), [])\r\n                .map(dado => new Negociacao(new Date(dado.data), dado.quantidade, dado.valor ));\r\n\r\n            return negociacoes;\r\n        }).catch(erro => {\r\n            throw new Error(erro);\r\n        });\r\n    }\r\n\r\n    cadastra(negociacao){\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(conexao => new NegociacaoDao(conexao))\r\n            .then(dao => dao.adiciona(negociacao))\r\n            .then(() => 'Negociação cadastrada com sucesso')\r\n            .catch(erro => {\r\n                throw new Error(\"Não foi possível adicionar a negociação\")\r\n            });\r\n    }\r\n    lista(){\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(conexao => new NegociacaoDao(conexao))\r\n            .then(dao => dao.listaTodos())\r\n    }\r\n    apaga(){\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.apagaTodos())\r\n    }\r\n\r\n    importa(listaAtual){\r\n        return this.obterNegociacoes()\r\n            .then(negociacoes =>\r\n                negociacoes.filter(negocicao =>\r\n                    !listaAtual.some(negociacaoExistente =>\r\n                        JSON.stringify(negocicao) == JSON.stringify(negociacaoExistente)))\r\n            )\r\n            .catch(()=> {throw new Error(\"Nao foi possivel importar negociacoes\")})\r\n    }\r\n    \r\n}"]}