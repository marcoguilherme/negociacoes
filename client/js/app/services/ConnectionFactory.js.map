{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","console","log","bind","onerror","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;AACI,IAAMA,SAAS,CAAC,aAAD,CAAf;AACA,IAAMC,UAAU,CAAhB;AACA,IAAMC,SAAS,YAAf;AACA,IAAIC,aAAa,IAAjB;AACA,IAAIC,QAAQ,IAAZ;;IAEaC,iB,WAAAA,iB;AAET,iCAAa;AAAA;;AACT,cAAM,IAAIC,KAAJ,CAAU,6CAAV,CAAN;AACH;;;;wCAEqB;AAClB,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAmB;AAClC,oBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAS,4BAAYI,eAAZ,GAA8B,aAAK;AAC/BT,sCAAkBU,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACH,iBAFD;;AAIAR,4BAAYS,SAAZ,GAAwB,aAAK;AACzBC,4BAAQC,GAAR,CAAY,4BAAZ;AACA,wBAAG,CAAClB,UAAJ,EAAgB;AACZA,qCAAaa,EAAEC,MAAF,CAASC,MAAtB;AACAd,gCAAQD,WAAWC,KAAX,CAAiBkB,IAAjB,CAAsBnB,UAAtB,CAAR;AACAA,mCAAWC,KAAX,GAAmB,YAAM;AACrB,kCAAM,IAAIE,KAAJ,CAAU,kCAAV,CAAN;AACH,yBAFD;AAGH;AACDE,4BAAQQ,EAAEC,MAAF,CAASC,MAAjB;AACH,iBAVD;;AAYAR,4BAAYa,OAAZ,GAAsB,aAAK;AACvBH,4BAAQC,GAAR,CAAYL,EAAEC,MAAF,CAASO,KAArB;AACAf,2BAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACH,iBAHD;AAIH,aAvBM,CAAP;AAwBH;;;sCAEoBtB,U,EAAW;AAC5BH,mBAAO0B,OAAP,CAAe,iBAAS;AACpB,oBAAGvB,WAAWe,MAAX,CAAkBS,gBAAlB,CAAmCC,QAAnC,CAA4CC,KAA5C,CAAH,EAAuD1B,WAAWe,MAAX,CAAkBY,iBAAlB,CAAoCD,KAApC;;AAEvD1B,2BAAWe,MAAX,CAAkBa,iBAAlB,CAAoCF,KAApC,EAA2C,EAAEG,eAAe,IAAjB,EAA3C;AACH,aAJD;AAKH;;;0CAEuB;;AAEpB,gBAAG7B,UAAH,EAAc;AACVC;AACAD,6BAAa,IAAb;AACH;AACJ","file":"ConnectionFactory.js","sourcesContent":["    \r\n    const stores = ['negociacoes'];\r\n    const version = 4;\r\n    const dbName = \"aluraframe\"\r\n    var connection = null;\r\n    var close = null;\r\n\r\n    export class ConnectionFactory {\r\n        \r\n        constructor(){\r\n            throw new Error(\"Nao e possivel instanciar ConnectionFactory\");\r\n        }\r\n\r\n        static getConnection(){\r\n            return new Promise((resolve, reject)=>{\r\n                let openRequest = window.indexedDB.open(dbName, version);\r\n\r\n                openRequest.onupgradeneeded = e => {\r\n                    ConnectionFactory._createStores(e.target.result)\r\n                }\r\n\r\n                openRequest.onsuccess = e => {\r\n                    console.log(\"Conexao obtida com o banco\");\r\n                    if(!connection) {\r\n                        connection = e.target.result;\r\n                        close = connection.close.bind(connection);\r\n                        connection.close = () => {\r\n                            throw new Error(\"Voce nao pode encerrar a conexao\")\r\n                        }\r\n                    };\r\n                    resolve(e.target.result);\r\n                }\r\n\r\n                openRequest.onerror = e => {\r\n                    console.log(e.target.error);\r\n                    reject(e.target.error.name);\r\n                }\r\n            })\r\n        }\r\n\r\n        static _createStores(connection){\r\n            stores.forEach(store => {\r\n                if(connection.result.objectStoreNames.contains(store)) connection.result.deleteObjectStore(store)\r\n                \r\n                connection.result.createObjectStore(store, { autoIncrement: true })\r\n            })\r\n        }\r\n\r\n        static closeConnection(){\r\n\r\n            if(connection){\r\n                close();\r\n                connection = null;\r\n            }\r\n        }\r\n    }"]}