{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["ConnectionFactory","stores","version","dbName","connection","close","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","console","log","bind","onerror","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;AAAA,IAAIA,oBAAqB,YAAW;;AAEhC,QAAMC,SAAS,CAAC,aAAD,CAAf;AACA,QAAMC,UAAU,CAAhB;AACA,QAAMC,SAAS,YAAf;AACA,QAAIC,aAAa,IAAjB;AACA,QAAIC,QAAQ,IAAZ;;AAEA;AAEI,qCAAa;AAAA;;AACT,kBAAM,IAAIC,KAAJ,CAAU,6CAAV,CAAN;AACH;;AAJL;AAAA;AAAA,4CAM0B;AAClB,uBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAmB;AAClC,wBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBV,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAQ,gCAAYI,eAAZ,GAA8B,aAAK;AAC/Bd,0CAAkBe,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACH,qBAFD;;AAIAR,gCAAYS,SAAZ,GAAwB,aAAK;AACzBC,gCAAQC,GAAR,CAAY,4BAAZ;AACA,4BAAG,CAACjB,UAAJ,EAAgB;AACZA,yCAAaY,EAAEC,MAAF,CAASC,MAAtB;AACAb,oCAAQD,WAAWC,KAAX,CAAiBiB,IAAjB,CAAsBlB,UAAtB,CAAR;AACAA,uCAAWC,KAAX,GAAmB,YAAM;AACrB,sCAAM,IAAIC,KAAJ,CAAU,kCAAV,CAAN;AACH,6BAFD;AAGH;AACDE,gCAAQQ,EAAEC,MAAF,CAASC,MAAjB;AACH,qBAVD;;AAYAR,gCAAYa,OAAZ,GAAsB,aAAK;AACvBH,gCAAQC,GAAR,CAAYL,EAAEC,MAAF,CAASO,KAArB;AACAf,+BAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACH,qBAHD;AAIH,iBAvBM,CAAP;AAwBH;AA/BL;AAAA;AAAA,0CAiCyBrB,UAjCzB,EAiCoC;AAC5BH,uBAAOyB,OAAP,CAAe,iBAAS;AACpB,wBAAGtB,WAAWc,MAAX,CAAkBS,gBAAlB,CAAmCC,QAAnC,CAA4CC,KAA5C,CAAH,EAAuDzB,WAAWc,MAAX,CAAkBY,iBAAlB,CAAoCD,KAApC;;AAEvDzB,+BAAWc,MAAX,CAAkBa,iBAAlB,CAAoCF,KAApC,EAA2C,EAAEG,eAAe,IAAjB,EAA3C;AACH,iBAJD;AAKH;AAvCL;AAAA;AAAA,8CAyC4B;;AAEpB,oBAAG5B,UAAH,EAAc;AACVC;AACAD,iCAAa,IAAb;AACH;AACJ;AA/CL;;AAAA;AAAA;AAiDH,CAzDuB,EAAxB","file":"ConnectionFactory.js","sourcesContent":["var ConnectionFactory = (function (){\r\n    \r\n    const stores = ['negociacoes'];\r\n    const version = 4;\r\n    const dbName = \"aluraframe\"\r\n    var connection = null;\r\n    var close = null;\r\n\r\n    return class ConnectionFactory {\r\n        \r\n        constructor(){\r\n            throw new Error(\"Nao e possivel instanciar ConnectionFactory\");\r\n        }\r\n\r\n        static getConnection(){\r\n            return new Promise((resolve, reject)=>{\r\n                let openRequest = window.indexedDB.open(dbName, version);\r\n\r\n                openRequest.onupgradeneeded = e => {\r\n                    ConnectionFactory._createStores(e.target.result)\r\n                }\r\n\r\n                openRequest.onsuccess = e => {\r\n                    console.log(\"Conexao obtida com o banco\");\r\n                    if(!connection) {\r\n                        connection = e.target.result;\r\n                        close = connection.close.bind(connection);\r\n                        connection.close = () => {\r\n                            throw new Error(\"Voce nao pode encerrar a conexao\")\r\n                        }\r\n                    };\r\n                    resolve(e.target.result);\r\n                }\r\n\r\n                openRequest.onerror = e => {\r\n                    console.log(e.target.error);\r\n                    reject(e.target.error.name);\r\n                }\r\n            })\r\n        }\r\n\r\n        static _createStores(connection){\r\n            stores.forEach(store => {\r\n                if(connection.result.objectStoreNames.contains(store)) connection.result.deleteObjectStore(store)\r\n                \r\n                connection.result.createObjectStore(store, { autoIncrement: true })\r\n            })\r\n        }\r\n\r\n        static closeConnection(){\r\n\r\n            if(connection){\r\n                close();\r\n                connection = null;\r\n            }\r\n        }\r\n    }\r\n})();"]}