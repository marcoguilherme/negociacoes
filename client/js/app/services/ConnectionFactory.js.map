{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","console","log","bind","onerror","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAMA,kB,GAAS,CAAC,aAAD,C;AACTC,mB,GAAU,C;AACVC,kB,GAAS,Y;AAEXC,sB,GAAa,I;AACbC,iB,GAAQ,I;;yCAECC,iB;AAET,6CAAa;AAAA;;AACT,0BAAM,IAAIC,KAAJ,CAAU,6CAAV,CAAN;AACH;;;;oDAEqB;AAClB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAmB;AAClC,gCAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAS,wCAAYI,eAAZ,GAA8B,aAAK;AAC/BT,kDAAkBU,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACH,6BAFD;;AAIAR,wCAAYS,SAAZ,GAAwB,aAAK;AACzBC,wCAAQC,GAAR,CAAY,4BAAZ;AACA,oCAAG,CAAClB,UAAJ,EAAgB;AACZA,iDAAaa,EAAEC,MAAF,CAASC,MAAtB;AACAd,4CAAQD,WAAWC,KAAX,CAAiBkB,IAAjB,CAAsBnB,UAAtB,CAAR;AACAA,+CAAWC,KAAX,GAAmB,YAAM;AACrB,8CAAM,IAAIE,KAAJ,CAAU,kCAAV,CAAN;AACH,qCAFD;AAGH;AACDE,wCAAQQ,EAAEC,MAAF,CAASC,MAAjB;AACH,6BAVD;;AAYAR,wCAAYa,OAAZ,GAAsB,aAAK;AACvBH,wCAAQC,GAAR,CAAYL,EAAEC,MAAF,CAASO,KAArB;AACAf,uCAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACH,6BAHD;AAIH,yBAvBM,CAAP;AAwBH;;;kDAEoBtB,U,EAAW;AAC5BH,+BAAO0B,OAAP,CAAe,iBAAS;AACpB,gCAAGvB,WAAWe,MAAX,CAAkBS,gBAAlB,CAAmCC,QAAnC,CAA4CC,KAA5C,CAAH,EAAuD1B,WAAWe,MAAX,CAAkBY,iBAAlB,CAAoCD,KAApC;;AAEvD1B,uCAAWe,MAAX,CAAkBa,iBAAlB,CAAoCF,KAApC,EAA2C,EAAEG,eAAe,IAAjB,EAA3C;AACH,yBAJD;AAKH;;;sDAEuB;;AAEpB,4BAAG7B,UAAH,EAAc;AACVC;AACAD,yCAAa,IAAb;AACH;AACJ","file":"ConnectionFactory.js","sourcesContent":["const stores = ['negociacoes'];\r\nconst version = 4;\r\nconst dbName = \"aluraframe\"\r\n\r\nlet connection = null;\r\nlet close = null;\r\n\r\nexport class ConnectionFactory {\r\n    \r\n    constructor(){\r\n        throw new Error(\"Nao e possivel instanciar ConnectionFactory\");\r\n    }\r\n\r\n    static getConnection(){\r\n        return new Promise((resolve, reject)=>{\r\n            let openRequest = window.indexedDB.open(dbName, version);\r\n\r\n            openRequest.onupgradeneeded = e => {\r\n                ConnectionFactory._createStores(e.target.result)\r\n            }\r\n\r\n            openRequest.onsuccess = e => {\r\n                console.log(\"Conexao obtida com o banco\");\r\n                if(!connection) {\r\n                    connection = e.target.result;\r\n                    close = connection.close.bind(connection);\r\n                    connection.close = () => {\r\n                        throw new Error(\"Voce nao pode encerrar a conexao\")\r\n                    }\r\n                };\r\n                resolve(e.target.result);\r\n            }\r\n\r\n            openRequest.onerror = e => {\r\n                console.log(e.target.error);\r\n                reject(e.target.error.name);\r\n            }\r\n        })\r\n    }\r\n\r\n    static _createStores(connection){\r\n        stores.forEach(store => {\r\n            if(connection.result.objectStoreNames.contains(store)) connection.result.deleteObjectStore(store)\r\n            \r\n            connection.result.createObjectStore(store, { autoIncrement: true })\r\n        })\r\n    }\r\n\r\n    static closeConnection(){\r\n\r\n        if(connection){\r\n            close();\r\n            connection = null;\r\n        }\r\n    }\r\n}"]}